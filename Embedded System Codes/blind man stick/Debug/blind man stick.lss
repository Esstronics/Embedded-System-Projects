
blind man stick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000094c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  0000094c  000009e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  0080018c  0080018c  00000b0c  2**0
                  ALLOC
  3 .stab         0000171c  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000060c  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000f8  00000000  00000000  00002863  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a8d  00000000  00000000  0000295b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000032f  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000799  00000000  00000000  00004717  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002ac  00000000  00000000  00004eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030e  00000000  00000000  0000515c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b96  00000000  00000000  0000546a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	34 c2       	rjmp	.+1128   	; 0x47a <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	3d c2       	rjmp	.+1146   	; 0x492 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e4       	ldi	r30, 0x4C	; 76
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 38       	cpi	r26, 0x8C	; 140
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	22 e0       	ldi	r18, 0x02	; 2
  4a:	ac e8       	ldi	r26, 0x8C	; 140
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 32       	cpi	r26, 0x24	; 36
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3e d2       	rcall	.+1148   	; 0x4d6 <main>
  5a:	76 c4       	rjmp	.+2284   	; 0x948 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <beep.2068>:
void dec2ascii (unsigned int my_dec, char digit)
{
	if (digit == 2)
	{
		lcd_write(((my_dec/10)%10) + 0x30);
		lcd_write((my_dec%10) + 0x30);
  5e:	88 23       	and	r24, r24
  60:	91 f0       	breq	.+36     	; 0x86 <beep.2068+0x28>
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	97 9a       	sbi	0x12, 7	; 18
  66:	ef e2       	ldi	r30, 0x2F	; 47
  68:	f5 e7       	ldi	r31, 0x75	; 117
  6a:	31 97       	sbiw	r30, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <beep.2068+0xc>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <beep.2068+0x12>
  70:	00 00       	nop
  72:	97 98       	cbi	0x12, 7	; 18
  74:	ef e4       	ldi	r30, 0x4F	; 79
  76:	f3 ec       	ldi	r31, 0xC3	; 195
	}
	else if (digit == 3)
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <beep.2068+0x1a>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <beep.2068+0x20>
	{
		lcd_write(((my_dec/100)%10) + 0x30);
  7e:	00 00       	nop
  80:	9f 5f       	subi	r25, 0xFF	; 255
  82:	98 13       	cpse	r25, r24
  84:	ef cf       	rjmp	.-34     	; 0x64 <beep.2068+0x6>
  86:	08 95       	ret

00000088 <lcd_cmd>:
  88:	98 2f       	mov	r25, r24
  8a:	90 7f       	andi	r25, 0xF0	; 240
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	c0 98       	cbi	0x18, 0	; 24
  90:	c1 9a       	sbi	0x18, 1	; 24
  92:	e3 ef       	ldi	r30, 0xF3	; 243
  94:	f1 e0       	ldi	r31, 0x01	; 1
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcd_cmd+0xe>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcd_cmd+0x14>
  9c:	00 00       	nop
  9e:	c1 98       	cbi	0x18, 1	; 24
  a0:	e3 ef       	ldi	r30, 0xF3	; 243
  a2:	f1 e0       	ldi	r31, 0x01	; 1
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0x1c>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_cmd+0x22>
  aa:	00 00       	nop
  ac:	82 95       	swap	r24
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	c0 98       	cbi	0x18, 0	; 24
  b4:	c1 9a       	sbi	0x18, 1	; 24
  b6:	83 ef       	ldi	r24, 0xF3	; 243
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_cmd+0x32>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_cmd+0x38>
  c0:	00 00       	nop
  c2:	c1 98       	cbi	0x18, 1	; 24
  c4:	e3 ef       	ldi	r30, 0xF3	; 243
  c6:	f1 e0       	ldi	r31, 0x01	; 1
  c8:	31 97       	sbiw	r30, 0x01	; 1
		lcd_write(((my_dec/10)%10) + 0x30);
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_cmd+0x40>
  cc:	00 c0       	rjmp	.+0      	; 0xce <lcd_cmd+0x46>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <lcd_write>:
  d2:	98 2f       	mov	r25, r24
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	98 bb       	out	0x18, r25	; 24
  d8:	c0 9a       	sbi	0x18, 0	; 24
  da:	c1 9a       	sbi	0x18, 1	; 24
  dc:	e3 ef       	ldi	r30, 0xF3	; 243
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_write+0xe>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_write+0x14>
  e6:	00 00       	nop
  e8:	c1 98       	cbi	0x18, 1	; 24
  ea:	e3 ef       	ldi	r30, 0xF3	; 243
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_write+0x1c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_write+0x22>
  f4:	00 00       	nop
  f6:	f0 e1       	ldi	r31, 0x10	; 16
  f8:	8f 9f       	mul	r24, r31
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	88 bb       	out	0x18, r24	; 24
 100:	c0 9a       	sbi	0x18, 0	; 24
 102:	c1 9a       	sbi	0x18, 1	; 24
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x36>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_write+0x3c>
 10e:	00 00       	nop
 110:	c1 98       	cbi	0x18, 1	; 24
		lcd_write((my_dec%10) + 0x30);
 112:	e3 ef       	ldi	r30, 0xF3	; 243
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_write+0x44>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_write+0x4a>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <lcd_rub>:
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	b2 df       	rcall	.-156    	; 0x88 <lcd_cmd>
 124:	08 95       	ret

00000126 <lcd_line2>:
 126:	80 ec       	ldi	r24, 0xC0	; 192
 128:	af df       	rcall	.-162    	; 0x88 <lcd_cmd>
 12a:	08 95       	ret

0000012c <lcd_string>:
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
	}
	else if (digit == 4)
 134:	e8 2f       	mov	r30, r24
 136:	f9 2f       	mov	r31, r25
 138:	df 01       	movw	r26, r30
	{
		lcd_write(((my_dec/1000)%10) + 0x30);
 13a:	0d 90       	ld	r0, X+
 13c:	00 20       	and	r0, r0
 13e:	e9 f7       	brne	.-6      	; 0x13a <lcd_string+0xe>
 140:	11 97       	sbiw	r26, 0x01	; 1
 142:	1a 2f       	mov	r17, r26
 144:	18 1b       	sub	r17, r24
 146:	49 f0       	breq	.+18     	; 0x15a <lcd_string+0x2e>
 148:	08 2f       	mov	r16, r24
 14a:	c8 2f       	mov	r28, r24
 14c:	d9 2f       	mov	r29, r25
 14e:	89 91       	ld	r24, Y+
 150:	c0 df       	rcall	.-128    	; 0xd2 <lcd_write>
 152:	8c 2f       	mov	r24, r28
 154:	80 1b       	sub	r24, r16
 156:	81 17       	cp	r24, r17
 158:	d0 f3       	brcs	.-12     	; 0x14e <lcd_string+0x22>
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <lcd_row_col>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	00 d0       	rcall	.+0      	; 0x16a <lcd_row_col+0x6>
 16a:	00 d0       	rcall	.+0      	; 0x16c <lcd_row_col+0x8>
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	90 e8       	ldi	r25, 0x80	; 128
 172:	99 83       	std	Y+1, r25	; 0x01
 174:	90 ec       	ldi	r25, 0xC0	; 192
 176:	9a 83       	std	Y+2, r25	; 0x02
 178:	94 e9       	ldi	r25, 0x94	; 148
 17a:	9b 83       	std	Y+3, r25	; 0x03
 17c:	94 ed       	ldi	r25, 0xD4	; 212
 17e:	9c 83       	std	Y+4, r25	; 0x04
 180:	61 50       	subi	r22, 0x01	; 1
 182:	fe 01       	movw	r30, r28
 184:	e8 0f       	add	r30, r24
 186:	f1 1d       	adc	r31, r1
 188:	80 81       	ld	r24, Z
 18a:	86 0f       	add	r24, r22
 18c:	7d df       	rcall	.-262    	; 0x88 <lcd_cmd>
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
		lcd_write(((my_dec/100)%10) + 0x30);
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <serial_init_inter>:
 19c:	2a b1       	in	r18, 0x0a	; 10
 19e:	28 69       	ori	r18, 0x98	; 152
 1a0:	2a b9       	out	0x0a, r18	; 10
 1a2:	20 b5       	in	r18, 0x20	; 32
 1a4:	26 68       	ori	r18, 0x86	; 134
 1a6:	20 bd       	out	0x20, r18	; 32
 1a8:	90 bd       	out	0x20, r25	; 32
 1aa:	89 b9       	out	0x09, r24	; 9
 1ac:	78 94       	sei
 1ae:	08 95       	ret

000001b0 <switch2gsm.2037>:
 1b0:	92 9a       	sbi	0x12, 2	; 18
 1b2:	93 98       	cbi	0x12, 3	; 18
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	f1 df       	rcall	.-30     	; 0x19c <serial_init_inter>
 1ba:	8f e4       	ldi	r24, 0x4F	; 79
 1bc:	93 ec       	ldi	r25, 0xC3	; 195
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <switch2gsm.2037+0xe>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <switch2gsm.2037+0x14>
 1c4:	00 00       	nop
 1c6:	08 95       	ret

000001c8 <serial_init_no_inter>:
 1c8:	2a b1       	in	r18, 0x0a	; 10
 1ca:	28 61       	ori	r18, 0x18	; 24
 1cc:	2a b9       	out	0x0a, r18	; 10
 1ce:	57 98       	cbi	0x0a, 7	; 10
 1d0:	20 b5       	in	r18, 0x20	; 32
 1d2:	26 68       	ori	r18, 0x86	; 134
 1d4:	20 bd       	out	0x20, r18	; 32
 1d6:	90 bd       	out	0x20, r25	; 32
 1d8:	89 b9       	out	0x09, r24	; 9
 1da:	08 95       	ret

000001dc <serial_rx>:
 1dc:	5f 9b       	sbis	0x0b, 7	; 11
		lcd_write(((my_dec/10)%10) + 0x30);
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <serial_rx>
 1e0:	8c b1       	in	r24, 0x0c	; 12
 1e2:	08 95       	ret

000001e4 <serial_tx>:
 1e4:	5d 9b       	sbis	0x0b, 5	; 11
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <serial_tx>
 1e8:	8c b9       	out	0x0c, r24	; 12
 1ea:	08 95       	ret

000001ec <serial_tx_string>:
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
 1f2:	88 81       	ld	r24, Y
 1f4:	88 23       	and	r24, r24
 1f6:	29 f0       	breq	.+10     	; 0x202 <serial_tx_string+0x16>
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	f4 df       	rcall	.-24     	; 0x1e4 <serial_tx>
 1fc:	89 91       	ld	r24, Y+
 1fe:	81 11       	cpse	r24, r1
 200:	fc cf       	rjmp	.-8      	; 0x1fa <serial_tx_string+0xe>
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <clr_sbuff>:
 208:	88 23       	and	r24, r24
 20a:	81 f0       	breq	.+32     	; 0x22c <clr_sbuff+0x24>
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	2f 5f       	subi	r18, 0xFF	; 255
 214:	3f 4f       	sbci	r19, 0xFF	; 255
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	40 e2       	ldi	r20, 0x20	; 32
 21c:	fc 01       	movw	r30, r24
 21e:	ec 53       	subi	r30, 0x3C	; 60
 220:	fe 4f       	sbci	r31, 0xFE	; 254
 222:	40 83       	st	Z, r20
 224:	01 96       	adiw	r24, 0x01	; 1
		lcd_write((my_dec%10) + 0x30);
 226:	82 17       	cp	r24, r18
 228:	93 07       	cpc	r25, r19
 22a:	c1 f7       	brne	.-16     	; 0x21c <clr_sbuff+0x14>
 22c:	10 92 8c 01 	sts	0x018C, r1
 230:	08 95       	ret

00000232 <send_sms>:
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	8c 01       	movw	r16, r24
 23c:	eb 01       	movw	r28, r22
 23e:	80 e6       	ldi	r24, 0x60	; 96
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	d4 df       	rcall	.-88     	; 0x1ec <serial_tx_string>
 244:	82 e2       	ldi	r24, 0x22	; 34
 246:	ce df       	rcall	.-100    	; 0x1e4 <serial_tx>
	}
	else if (digit == 5)
 248:	c8 01       	movw	r24, r16
 24a:	d0 df       	rcall	.-96     	; 0x1ec <serial_tx_string>
 24c:	82 e2       	ldi	r24, 0x22	; 34
	{
		lcd_write(((my_dec/10000)%10) + 0x30);
 24e:	ca df       	rcall	.-108    	; 0x1e4 <serial_tx>
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	c8 df       	rcall	.-112    	; 0x1e4 <serial_tx>
 254:	2f e3       	ldi	r18, 0x3F	; 63
 256:	8d e0       	ldi	r24, 0x0D	; 13
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <send_sms+0x28>
 262:	00 c0       	rjmp	.+0      	; 0x264 <send_sms+0x32>
 264:	00 00       	nop
 266:	ce 01       	movw	r24, r28
 268:	c1 df       	rcall	.-126    	; 0x1ec <serial_tx_string>
 26a:	8a e1       	ldi	r24, 0x1A	; 26
 26c:	bb df       	rcall	.-138    	; 0x1e4 <serial_tx>
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	84 e3       	ldi	r24, 0x34	; 52
		lcd_write(((my_dec/1000)%10) + 0x30);
 272:	9c e0       	ldi	r25, 0x0C	; 12
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <send_sms+0x42>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <send_sms+0x4c>
 27e:	00 00       	nop
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <findNetwork>:
 28a:	ef 92       	push	r14
 28c:	ff 92       	push	r15
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	44 df       	rcall	.-376    	; 0x120 <lcd_rub>
 298:	82 eb       	ldi	r24, 0xB2	; 178
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	47 df       	rcall	.-370    	; 0x12c <lcd_string>
 29e:	43 df       	rcall	.-378    	; 0x126 <lcd_line2>
 2a0:	83 ec       	ldi	r24, 0xC3	; 195
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	43 df       	rcall	.-378    	; 0x12c <lcd_string>
 2a6:	cd ec       	ldi	r28, 0xCD	; 205
 2a8:	d1 e0       	ldi	r29, 0x01	; 1
 2aa:	0e ec       	ldi	r16, 0xCE	; 206
 2ac:	11 e0       	ldi	r17, 0x01	; 1
 2ae:	0f 2e       	mov	r0, r31
 2b0:	ff ec       	ldi	r31, 0xCF	; 207
 2b2:	ef 2e       	mov	r14, r31
 2b4:	f1 e0       	ldi	r31, 0x01	; 1
 2b6:	ff 2e       	mov	r15, r31
 2b8:	f0 2d       	mov	r31, r0
 2ba:	81 ea       	ldi	r24, 0xA1	; 161
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	96 df       	rcall	.-212    	; 0x1ec <serial_tx_string>
 2c0:	2f e7       	ldi	r18, 0x7F	; 127
 2c2:	88 e3       	ldi	r24, 0x38	; 56
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
		lcd_write(((my_dec/100)%10) + 0x30);
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <findNetwork+0x3c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <findNetwork+0x46>
 2d0:	00 00       	nop
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	99 df       	rcall	.-206    	; 0x208 <clr_sbuff>
 2d6:	8b ec       	ldi	r24, 0xCB	; 203
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	88 df       	rcall	.-240    	; 0x1ec <serial_tx_string>
 2dc:	ef e7       	ldi	r30, 0x7F	; 127
 2de:	f8 e3       	ldi	r31, 0x38	; 56
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	e1 50       	subi	r30, 0x01	; 1
 2e4:	f0 40       	sbci	r31, 0x00	; 0
 2e6:	20 40       	sbci	r18, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <findNetwork+0x58>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <findNetwork+0x62>
 2ec:	00 00       	nop
 2ee:	88 81       	ld	r24, Y
 2f0:	80 33       	cpi	r24, 0x30	; 48
 2f2:	f9 f4       	brne	.+62     	; 0x332 <findNetwork+0xa8>
 2f4:	f8 01       	movw	r30, r16
 2f6:	80 81       	ld	r24, Z
 2f8:	8c 32       	cpi	r24, 0x2C	; 44
 2fa:	d9 f4       	brne	.+54     	; 0x332 <findNetwork+0xa8>
 2fc:	f7 01       	movw	r30, r14
 2fe:	80 81       	ld	r24, Z
 300:	81 33       	cpi	r24, 0x31	; 49
 302:	b9 f4       	brne	.+46     	; 0x332 <findNetwork+0xa8>
 304:	0d df       	rcall	.-486    	; 0x120 <lcd_rub>
 306:	85 ed       	ldi	r24, 0xD5	; 213
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	10 df       	rcall	.-480    	; 0x12c <lcd_string>
 30c:	0c df       	rcall	.-488    	; 0x126 <lcd_line2>
 30e:	86 ee       	ldi	r24, 0xE6	; 230
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0c df       	rcall	.-488    	; 0x12c <lcd_string>
 314:	86 e9       	ldi	r24, 0x96	; 150
		lcd_write(((my_dec/10)%10) + 0x30);
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	69 df       	rcall	.-302    	; 0x1ec <serial_tx_string>
 31a:	ff ef       	ldi	r31, 0xFF	; 255
 31c:	24 e3       	ldi	r18, 0x34	; 52
 31e:	8c e0       	ldi	r24, 0x0C	; 12
 320:	f1 50       	subi	r31, 0x01	; 1
 322:	20 40       	sbci	r18, 0x00	; 0
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <findNetwork+0x96>
 328:	00 c0       	rjmp	.+0      	; 0x32a <findNetwork+0xa0>
 32a:	00 00       	nop
 32c:	8e e2       	ldi	r24, 0x2E	; 46
 32e:	d1 de       	rcall	.-606    	; 0xd2 <lcd_write>
 330:	34 c0       	rjmp	.+104    	; 0x39a <findNetwork+0x110>
 332:	68 e0       	ldi	r22, 0x08	; 8
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	16 df       	rcall	.-468    	; 0x164 <lcd_row_col>
 338:	87 ef       	ldi	r24, 0xF7	; 247
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	f7 de       	rcall	.-530    	; 0x12c <lcd_string>
 33e:	9f e3       	ldi	r25, 0x3F	; 63
 340:	ed e0       	ldi	r30, 0x0D	; 13
 342:	f3 e0       	ldi	r31, 0x03	; 3
 344:	91 50       	subi	r25, 0x01	; 1
 346:	e0 40       	sbci	r30, 0x00	; 0
 348:	f0 40       	sbci	r31, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <findNetwork+0xba>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <findNetwork+0xc4>
 34e:	00 00       	nop
 350:	68 e0       	ldi	r22, 0x08	; 8
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	07 df       	rcall	.-498    	; 0x164 <lcd_row_col>
 356:	8e e2       	ldi	r24, 0x2E	; 46
 358:	bc de       	rcall	.-648    	; 0xd2 <lcd_write>
 35a:	2f e7       	ldi	r18, 0x7F	; 127
 35c:	89 ea       	ldi	r24, 0xA9	; 169
		lcd_write((my_dec%10) + 0x30);
 35e:	93 e0       	ldi	r25, 0x03	; 3
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <findNetwork+0xd6>
 368:	00 c0       	rjmp	.+0      	; 0x36a <findNetwork+0xe0>
 36a:	00 00       	nop
 36c:	8e e2       	ldi	r24, 0x2E	; 46
 36e:	b1 de       	rcall	.-670    	; 0xd2 <lcd_write>
 370:	ef e7       	ldi	r30, 0x7F	; 127
 372:	f9 ea       	ldi	r31, 0xA9	; 169
 374:	23 e0       	ldi	r18, 0x03	; 3
 376:	e1 50       	subi	r30, 0x01	; 1
 378:	f0 40       	sbci	r31, 0x00	; 0
 37a:	20 40       	sbci	r18, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <findNetwork+0xec>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <findNetwork+0xf6>
	}
	else
	{
		lcd_write(((my_dec/100000)%10) + 0x30);
 380:	00 00       	nop
 382:	8e e2       	ldi	r24, 0x2E	; 46
 384:	a6 de       	rcall	.-692    	; 0xd2 <lcd_write>
 386:	8f e7       	ldi	r24, 0x7F	; 127
 388:	98 e3       	ldi	r25, 0x38	; 56
 38a:	e1 e0       	ldi	r30, 0x01	; 1
 38c:	81 50       	subi	r24, 0x01	; 1
 38e:	90 40       	sbci	r25, 0x00	; 0
 390:	e0 40       	sbci	r30, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <findNetwork+0x102>
 394:	00 c0       	rjmp	.+0      	; 0x396 <findNetwork+0x10c>
 396:	00 00       	nop
 398:	90 cf       	rjmp	.-224    	; 0x2ba <findNetwork+0x30>
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
		lcd_write(((my_dec/10000)%10) + 0x30);
 3a4:	ef 90       	pop	r14
 3a6:	08 95       	ret

000003a8 <sim800init>:
 3a8:	86 e9       	ldi	r24, 0x96	; 150
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	1f df       	rcall	.-450    	; 0x1ec <serial_tx_string>
 3ae:	2f e7       	ldi	r18, 0x7F	; 127
 3b0:	88 e3       	ldi	r24, 0x38	; 56
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <sim800init+0xc>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <sim800init+0x16>
 3be:	00 00       	nop
 3c0:	8b e8       	ldi	r24, 0x8B	; 139
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	13 df       	rcall	.-474    	; 0x1ec <serial_tx_string>
 3c6:	2f e7       	ldi	r18, 0x7F	; 127
		lcd_write(((my_dec/1000)%10) + 0x30);
 3c8:	88 e3       	ldi	r24, 0x38	; 56
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <sim800init+0x24>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <sim800init+0x2e>
 3d6:	00 00       	nop
 3d8:	81 ea       	ldi	r24, 0xA1	; 161
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	07 df       	rcall	.-498    	; 0x1ec <serial_tx_string>
 3de:	2f e7       	ldi	r18, 0x7F	; 127
 3e0:	88 e3       	ldi	r24, 0x38	; 56
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <sim800init+0x3c>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <sim800init+0x46>
 3ee:	00 00       	nop
 3f0:	8c ef       	ldi	r24, 0xFC	; 252
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	fb de       	rcall	.-522    	; 0x1ec <serial_tx_string>
 3f6:	2f e7       	ldi	r18, 0x7F	; 127
 3f8:	88 e3       	ldi	r24, 0x38	; 56
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <sim800init+0x54>
 404:	00 c0       	rjmp	.+0      	; 0x406 <sim800init+0x5e>
 406:	00 00       	nop
 408:	08 95       	ret

0000040a <adc_read>:
 40a:	96 b1       	in	r25, 0x06	; 6
 40c:	94 68       	ori	r25, 0x84	; 132
 40e:	96 b9       	out	0x06, r25	; 6
 410:	3e 9a       	sbi	0x07, 6	; 7
 412:	e3 ef       	ldi	r30, 0xF3	; 243
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <adc_read+0xc>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <adc_read+0x12>
 41c:	00 00       	nop
 41e:	97 b1       	in	r25, 0x07	; 7
		lcd_write(((my_dec/100)%10) + 0x30);
 420:	90 7e       	andi	r25, 0xE0	; 224
 422:	89 0f       	add	r24, r25
 424:	87 b9       	out	0x07, r24	; 7
 426:	36 9a       	sbi	0x06, 6	; 6
 428:	36 99       	sbic	0x06, 6	; 6
 42a:	fe cf       	rjmp	.-4      	; 0x428 <adc_read+0x1e>
 42c:	24 b1       	in	r18, 0x04	; 4
 42e:	35 b1       	in	r19, 0x05	; 5
 430:	82 2f       	mov	r24, r18
 432:	93 2f       	mov	r25, r19
 434:	08 95       	ret

00000436 <HCSR04_read>:
 436:	8e 98       	cbi	0x11, 6	; 17
 438:	8d 9a       	sbi	0x11, 5	; 17
 43a:	95 98       	cbi	0x12, 5	; 18
 43c:	95 9a       	sbi	0x12, 5	; 18
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	8a 95       	dec	r24
 442:	f1 f7       	brne	.-4      	; 0x440 <HCSR04_read+0xa>
 444:	95 98       	cbi	0x12, 5	; 18
 446:	86 9b       	sbis	0x10, 6	; 16
 448:	fe cf       	rjmp	.-4      	; 0x446 <HCSR04_read+0x10>
 44a:	1d bc       	out	0x2d, r1	; 45
 44c:	1c bc       	out	0x2c, r1	; 44
 44e:	8e b5       	in	r24, 0x2e	; 46
 450:	81 60       	ori	r24, 0x01	; 1
 452:	8e bd       	out	0x2e, r24	; 46
 454:	89 b7       	in	r24, 0x39	; 57
 456:	84 60       	ori	r24, 0x04	; 4
 458:	89 bf       	out	0x39, r24	; 57
 45a:	78 94       	sei
 45c:	86 99       	sbic	0x10, 6	; 16
 45e:	fe cf       	rjmp	.-4      	; 0x45c <HCSR04_read+0x26>
 460:	1e bc       	out	0x2e, r1	; 46
 462:	f8 94       	cli
 464:	6c b5       	in	r22, 0x2c	; 44
 466:	7d b5       	in	r23, 0x2d	; 45
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
		lcd_write(((my_dec/10)%10) + 0x30);
 46c:	df d1       	rcall	.+958    	; 0x82c <__floatunsisf>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	48 e6       	ldi	r20, 0x68	; 104
 474:	52 e4       	ldi	r21, 0x42	; 66
 476:	41 d1       	rcall	.+642    	; 0x6fa <__divsf3>
 478:	08 95       	ret

0000047a <__vector_8>:
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	1d bc       	out	0x2d, r1	; 45
 486:	1c bc       	out	0x2c, r1	; 44
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_11>:
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
 4a4:	80 91 8c 01 	lds	r24, 0x018C
 4a8:	e8 2f       	mov	r30, r24
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	9c b1       	in	r25, 0x0c	; 12
 4ae:	ec 53       	subi	r30, 0x3C	; 60
 4b0:	fe 4f       	sbci	r31, 0xFE	; 254
 4b2:	90 83       	st	Z, r25
		lcd_write((my_dec%10) + 0x30);
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	80 35       	cpi	r24, 0x50	; 80
 4b8:	19 f0       	breq	.+6      	; 0x4c0 <__vector_11+0x2e>
 4ba:	80 93 8c 01 	sts	0x018C, r24
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__vector_11+0x32>
 4c0:	10 92 8c 01 	sts	0x018C, r1
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
	}
}
 4d4:	18 95       	reti

000004d6 <main>:
 4d6:	8a 9a       	sbi	0x11, 2	; 17
 4d8:	8b 9a       	sbi	0x11, 3	; 17
 4da:	8f 9a       	sbi	0x11, 7	; 17
 4dc:	8e 98       	cbi	0x11, 6	; 17
	
	DDRD |= (1<<bit_a);   
	DDRD |= (1<<bit_b);  
	DDRD |= (1<<buzer); 
	DDRD &=~ (1<<echo);
	DDRD |= (1<<triga);
 4de:	8d 9a       	sbi	0x11, 5	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e0:	2f ef       	ldi	r18, 0xFF	; 255
 4e2:	84 e3       	ldi	r24, 0x34	; 52
 4e4:	9c e0       	ldi	r25, 0x0C	; 12
 4e6:	21 50       	subi	r18, 0x01	; 1
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	90 40       	sbci	r25, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <main+0x10>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0x1a>
 4f0:	00 00       	nop
	_delay_ms(2000);
	beep(3);
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	b4 dd       	rcall	.-1176   	; 0x5e <beep.2068>
	switch2gsm();
 4f6:	5c de       	rcall	.-840    	; 0x1b0 <switch2gsm.2037>
	sim800init();
 4f8:	57 df       	rcall	.-338    	; 0x3a8 <sim800init>
	findNetwork();
 4fa:	c7 de       	rcall	.-626    	; 0x28a <findNetwork>
	beep(2);
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	af dd       	rcall	.-1186   	; 0x5e <beep.2068>
 500:	ef ef       	ldi	r30, 0xFF	; 255
 502:	f4 e3       	ldi	r31, 0x34	; 52
 504:	2c e0       	ldi	r18, 0x0C	; 12
 506:	e1 50       	subi	r30, 0x01	; 1
 508:	f0 40       	sbci	r31, 0x00	; 0
 50a:	20 40       	sbci	r18, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <main+0x30>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <main+0x3a>
 510:	00 00       	nop
		unsigned char bola;
gps1:	do
		{
			bola = serial_rx();
		} while (bola != '$');
		serial_buff[0] = serial_rx();
 512:	0f 2e       	mov	r0, r31
 514:	f4 ec       	ldi	r31, 0xC4	; 196
 516:	cf 2e       	mov	r12, r31
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	df 2e       	mov	r13, r31
 51c:	f0 2d       	mov	r31, r0
		serial_buff[1] = serial_rx();
 51e:	0f 2e       	mov	r0, r31
 520:	f5 ec       	ldi	r31, 0xC5	; 197
 522:	8f 2e       	mov	r8, r31
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	9f 2e       	mov	r9, r31
 528:	f0 2d       	mov	r31, r0
		serial_buff[2] = serial_rx();
 52a:	c6 ec       	ldi	r28, 0xC6	; 198
 52c:	d1 e0       	ldi	r29, 0x01	; 1
		serial_buff[3] = serial_rx();
 52e:	07 ec       	ldi	r16, 0xC7	; 199
 530:	11 e0       	ldi	r17, 0x01	; 1
		serial_buff[4] = serial_rx();
 532:	0f 2e       	mov	r0, r31
 534:	f8 ec       	ldi	r31, 0xC8	; 200
 536:	ef 2e       	mov	r14, r31
 538:	f1 e0       	ldi	r31, 0x01	; 1
 53a:	ff 2e       	mov	r15, r31
 53c:	f0 2d       	mov	r31, r0
		 
    while(1)
    {
        do 
        {
			int obj = HCSR04_read();
 53e:	7b df       	rcall	.-266    	; 0x436 <HCSR04_read>
 540:	44 d1       	rcall	.+648    	; 0x7ca <__fixsfsi>
			if (obj < 50)
 542:	62 33       	cpi	r22, 0x32	; 50
 544:	71 05       	cpc	r23, r1
 546:	14 f4       	brge	.+4      	; 0x54c <main+0x76>
			{
				beep(3);				
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	89 dd       	rcall	.-1262   	; 0x5e <beep.2068>
			}			
        } while (adc_read(0x00) < 245);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	5d df       	rcall	.-326    	; 0x40a <adc_read>
 550:	85 3f       	cpi	r24, 0xF5	; 245
 552:	91 05       	cpc	r25, r1
 554:	a4 f3       	brlt	.-24     	; 0x53e <main+0x68>

int main(void)
{
	void switch2gps(void)
	{
		PORTD &=~ (1<<bit_b);
 556:	93 98       	cbi	0x12, 3	; 18
		PORTD &=~ (1<<bit_a);
 558:	92 98       	cbi	0x12, 2	; 18
		serial_init_no_inter(gpsbaud);
 55a:	8c e0       	ldi	r24, 0x0C	; 12
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	34 de       	rcall	.-920    	; 0x1c8 <serial_init_no_inter>
 560:	8f e4       	ldi	r24, 0x4F	; 79
 562:	93 ec       	ldi	r25, 0xC3	; 195
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <main+0x8e>
 568:	00 c0       	rjmp	.+0      	; 0x56a <main+0x94>
 56a:	00 00       	nop
	{
		switch2gps();
		unsigned char bola;
gps1:	do
		{
			bola = serial_rx();
 56c:	37 de       	rcall	.-914    	; 0x1dc <serial_rx>
		} while (bola != '$');
 56e:	84 32       	cpi	r24, 0x24	; 36
 570:	e9 f7       	brne	.-6      	; 0x56c <main+0x96>
		serial_buff[0] = serial_rx();
 572:	34 de       	rcall	.-920    	; 0x1dc <serial_rx>
 574:	f6 01       	movw	r30, r12
 576:	80 83       	st	Z, r24
		serial_buff[1] = serial_rx();
 578:	31 de       	rcall	.-926    	; 0x1dc <serial_rx>
 57a:	f4 01       	movw	r30, r8
 57c:	80 83       	st	Z, r24
		serial_buff[2] = serial_rx();
 57e:	2e de       	rcall	.-932    	; 0x1dc <serial_rx>
 580:	88 83       	st	Y, r24
		serial_buff[3] = serial_rx();
 582:	2c de       	rcall	.-936    	; 0x1dc <serial_rx>
 584:	f8 01       	movw	r30, r16
 586:	80 83       	st	Z, r24
		serial_buff[4] = serial_rx();
 588:	29 de       	rcall	.-942    	; 0x1dc <serial_rx>
 58a:	f7 01       	movw	r30, r14
 58c:	80 83       	st	Z, r24
		if (serial_buff[2] == 'G' && serial_buff[3] == 'L' && serial_buff[4] == 'L')
 58e:	88 81       	ld	r24, Y
 590:	87 34       	cpi	r24, 0x47	; 71
 592:	61 f7       	brne	.-40     	; 0x56c <main+0x96>
 594:	f8 01       	movw	r30, r16
 596:	80 81       	ld	r24, Z
 598:	8c 34       	cpi	r24, 0x4C	; 76
 59a:	41 f7       	brne	.-48     	; 0x56c <main+0x96>
 59c:	f7 01       	movw	r30, r14
 59e:	80 81       	ld	r24, Z
 5a0:	8c 34       	cpi	r24, 0x4C	; 76
 5a2:	21 f7       	brne	.-56     	; 0x56c <main+0x96>
		{
			cant = 0;
 5a4:	10 92 8c 01 	sts	0x018C, r1
			do
			{
				serial_buff[cant] = serial_rx();
 5a8:	a0 90 8c 01 	lds	r10, 0x018C
 5ac:	b1 2c       	mov	r11, r1
 5ae:	16 de       	rcall	.-980    	; 0x1dc <serial_rx>
 5b0:	f5 01       	movw	r30, r10
 5b2:	ec 53       	subi	r30, 0x3C	; 60
 5b4:	fe 4f       	sbci	r31, 0xFE	; 254
 5b6:	80 83       	st	Z, r24
				cant++;
 5b8:	80 91 8c 01 	lds	r24, 0x018C
 5bc:	8f 5f       	subi	r24, 0xFF	; 255
 5be:	80 93 8c 01 	sts	0x018C, r24
			} while (serial_buff[cant-1] != 0x0d);
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	fc 01       	movw	r30, r24
 5c6:	ed 53       	subi	r30, 0x3D	; 61
 5c8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ca:	20 81       	ld	r18, Z
 5cc:	2d 30       	cpi	r18, 0x0D	; 13
 5ce:	61 f7       	brne	.-40     	; 0x5a8 <main+0xd2>
			serial_buff[cant] = 0x0d;
 5d0:	fc 01       	movw	r30, r24
 5d2:	ec 53       	subi	r30, 0x3C	; 60
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	20 83       	st	Z, r18
			if (serial_buff[0] == ',' && serial_buff[1] == ',' && serial_buff[2] == ',')
 5d8:	f6 01       	movw	r30, r12
 5da:	80 81       	ld	r24, Z
 5dc:	8c 32       	cpi	r24, 0x2C	; 44
 5de:	41 f4       	brne	.+16     	; 0x5f0 <main+0x11a>
 5e0:	f4 01       	movw	r30, r8
 5e2:	80 81       	ld	r24, Z
 5e4:	8c 32       	cpi	r24, 0x2C	; 44
 5e6:	21 f4       	brne	.+8      	; 0x5f0 <main+0x11a>
 5e8:	88 81       	ld	r24, Y
 5ea:	8c 32       	cpi	r24, 0x2C	; 44
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <main+0x11a>
 5ee:	5e c0       	rjmp	.+188    	; 0x6ac <main+0x1d6>
			{
				bola = 1;
			}
			else
			{
				cant = 1;
 5f0:	f1 e0       	ldi	r31, 0x01	; 1
 5f2:	f0 93 8c 01 	sts	0x018C, r31
 5f6:	0f 2e       	mov	r0, r31
 5f8:	f5 e1       	ldi	r31, 0x15	; 21
 5fa:	6f 2e       	mov	r6, r31
 5fc:	f2 e0       	ldi	r31, 0x02	; 2
 5fe:	7f 2e       	mov	r7, r31
 600:	f0 2d       	mov	r31, r0
	{
		cant = 0;
	}
}

int main(void)
 602:	0f 2e       	mov	r0, r31
 604:	f1 e2       	ldi	r31, 0x21	; 33
 606:	2f 2e       	mov	r2, r31
 608:	f2 e0       	ldi	r31, 0x02	; 2
 60a:	3f 2e       	mov	r3, r31
 60c:	f0 2d       	mov	r31, r0
 60e:	f3 01       	movw	r30, r6
 610:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				cant = 1;
				for (unsigned char a=0; a<12; a++)
				{
					lat[a] = serial_buff[cant];
 612:	a8 2f       	mov	r26, r24
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	ac 53       	subi	r26, 0x3C	; 60
 618:	be 4f       	sbci	r27, 0xFE	; 254
 61a:	9c 91       	ld	r25, X
 61c:	91 93       	st	Z+, r25
 61e:	8f 5f       	subi	r24, 0xFF	; 255
				bola = 1;
			}
			else
			{
				cant = 1;
				for (unsigned char a=0; a<12; a++)
 620:	e2 15       	cp	r30, r2
 622:	f3 05       	cpc	r31, r3
 624:	b1 f7       	brne	.-20     	; 0x612 <main+0x13c>
				{
					lat[a] = serial_buff[cant];
					cant++;
				}
				cant = 14;
 626:	8e e0       	ldi	r24, 0x0E	; 14
 628:	80 93 8c 01 	sts	0x018C, r24
 62c:	0f 2e       	mov	r0, r31
 62e:	f5 eb       	ldi	r31, 0xB5	; 181
 630:	4f 2e       	mov	r4, r31
 632:	f1 e0       	ldi	r31, 0x01	; 1
 634:	5f 2e       	mov	r5, r31
 636:	f0 2d       	mov	r31, r0
	{
		cant = 0;
	}
}

int main(void)
 638:	0f 2e       	mov	r0, r31
 63a:	f2 ec       	ldi	r31, 0xC2	; 194
 63c:	af 2e       	mov	r10, r31
 63e:	f1 e0       	ldi	r31, 0x01	; 1
 640:	bf 2e       	mov	r11, r31
 642:	f0 2d       	mov	r31, r0
 644:	f2 01       	movw	r30, r4
					cant++;
				}
				cant = 14;
				for (unsigned char a=0; a<13; a++)
				{
					lon[a] = serial_buff[cant];
 646:	a8 2f       	mov	r26, r24
 648:	b0 e0       	ldi	r27, 0x00	; 0
 64a:	ac 53       	subi	r26, 0x3C	; 60
 64c:	be 4f       	sbci	r27, 0xFE	; 254
 64e:	9c 91       	ld	r25, X
 650:	91 93       	st	Z+, r25
 652:	8f 5f       	subi	r24, 0xFF	; 255
				{
					lat[a] = serial_buff[cant];
					cant++;
				}
				cant = 14;
				for (unsigned char a=0; a<13; a++)
 654:	ea 15       	cp	r30, r10
 656:	fb 05       	cpc	r31, r11
 658:	b1 f7       	brne	.-20     	; 0x646 <main+0x170>
 65a:	31 c0       	rjmp	.+98     	; 0x6be <main+0x1e8>
		serial_tx(0x0D);
		_delay_ms(500);
		serial_tx_string("Attention...smoke detected at Lat: ");
		for (unsigned char a=0; a<12; a++)
		{
			serial_tx(lat[a]);
 65c:	f3 01       	movw	r30, r6
 65e:	81 91       	ld	r24, Z+
 660:	3f 01       	movw	r6, r30
 662:	c0 dd       	rcall	.-1152   	; 0x1e4 <serial_tx>
		serial_tx_string(num);
		serial_tx(0x22);
		serial_tx(0x0D);
		_delay_ms(500);
		serial_tx_string("Attention...smoke detected at Lat: ");
		for (unsigned char a=0; a<12; a++)
 664:	62 14       	cp	r6, r2
 666:	73 04       	cpc	r7, r3
 668:	c9 f7       	brne	.-14     	; 0x65c <main+0x186>
		{
			serial_tx(lat[a]);
		}
		serial_tx_string(" and Long: ");
 66a:	80 e1       	ldi	r24, 0x10	; 16
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	be dd       	rcall	.-1156   	; 0x1ec <serial_tx_string>
		for (unsigned char a=0; a<13; a++)
		{
			serial_tx(lon[a]);
 670:	f2 01       	movw	r30, r4
 672:	81 91       	ld	r24, Z+
 674:	2f 01       	movw	r4, r30
 676:	b6 dd       	rcall	.-1172   	; 0x1e4 <serial_tx>
		for (unsigned char a=0; a<12; a++)
		{
			serial_tx(lat[a]);
		}
		serial_tx_string(" and Long: ");
		for (unsigned char a=0; a<13; a++)
 678:	4a 14       	cp	r4, r10
 67a:	5b 04       	cpc	r5, r11
 67c:	c9 f7       	brne	.-14     	; 0x670 <main+0x19a>
		{
			serial_tx(lon[a]);
		}
		serial_tx(0x1A);
 67e:	8a e1       	ldi	r24, 0x1A	; 26
 680:	b1 dd       	rcall	.-1182   	; 0x1e4 <serial_tx>
 682:	ff e7       	ldi	r31, 0x7F	; 127
 684:	2f e4       	ldi	r18, 0x4F	; 79
 686:	82 e1       	ldi	r24, 0x12	; 18
 688:	f1 50       	subi	r31, 0x01	; 1
 68a:	20 40       	sbci	r18, 0x00	; 0
 68c:	80 40       	sbci	r24, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <main+0x1b2>
 690:	00 c0       	rjmp	.+0      	; 0x692 <main+0x1bc>
 692:	00 00       	nop
		unsigned char aaa = gps_read();
		if (aaa == 2)
		{
			switch2gsm();
			sendGPS("+2349078166101");
			beep(3);
 694:	83 e0       	ldi	r24, 0x03	; 3
 696:	e3 dc       	rcall	.-1594   	; 0x5e <beep.2068>
 698:	9f ef       	ldi	r25, 0xFF	; 255
 69a:	e4 e3       	ldi	r30, 0x34	; 52
 69c:	fc e0       	ldi	r31, 0x0C	; 12
 69e:	91 50       	subi	r25, 0x01	; 1
 6a0:	e0 40       	sbci	r30, 0x00	; 0
 6a2:	f0 40       	sbci	r31, 0x00	; 0
 6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0x1c8>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0x1d2>
 6a8:	00 00       	nop
 6aa:	49 cf       	rjmp	.-366    	; 0x53e <main+0x68>
		}
		else
		{
			switch2gsm();
 6ac:	81 dd       	rcall	.-1278   	; 0x1b0 <switch2gsm.2037>
			send_sms("+2349078166101", "Attention... smoke detected but GPS has no lock on satellite");
 6ae:	6c e1       	ldi	r22, 0x1C	; 28
 6b0:	71 e0       	ldi	r23, 0x01	; 1
 6b2:	89 e5       	ldi	r24, 0x59	; 89
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	bd dd       	rcall	.-1158   	; 0x232 <send_sms>
			beep(5);
 6b8:	85 e0       	ldi	r24, 0x05	; 5
 6ba:	d1 dc       	rcall	.-1630   	; 0x5e <beep.2068>
 6bc:	ed cf       	rjmp	.-38     	; 0x698 <main+0x1c2>
 6be:	8b e1       	ldi	r24, 0x1B	; 27
 6c0:	80 93 8c 01 	sts	0x018C, r24
        } while (adc_read(0x00) < 245);
		
		unsigned char aaa = gps_read();
		if (aaa == 2)
		{
			switch2gsm();
 6c4:	75 dd       	rcall	.-1302   	; 0x1b0 <switch2gsm.2037>
		
		return bola;
	}
	void sendGPS (char *num)
	{
		switch2gsm();
 6c6:	74 dd       	rcall	.-1304   	; 0x1b0 <switch2gsm.2037>
		serial_tx_string("AT+CMGS=");
 6c8:	80 e6       	ldi	r24, 0x60	; 96
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	8f dd       	rcall	.-1250   	; 0x1ec <serial_tx_string>
		serial_tx(0x22);
 6ce:	82 e2       	ldi	r24, 0x22	; 34
 6d0:	89 dd       	rcall	.-1262   	; 0x1e4 <serial_tx>
		serial_tx_string(num);
 6d2:	89 e5       	ldi	r24, 0x59	; 89
 6d4:	91 e0       	ldi	r25, 0x01	; 1
 6d6:	8a dd       	rcall	.-1260   	; 0x1ec <serial_tx_string>
		serial_tx(0x22);
 6d8:	82 e2       	ldi	r24, 0x22	; 34
 6da:	84 dd       	rcall	.-1272   	; 0x1e4 <serial_tx>
		serial_tx(0x0D);
 6dc:	8d e0       	ldi	r24, 0x0D	; 13
 6de:	82 dd       	rcall	.-1276   	; 0x1e4 <serial_tx>
 6e0:	2f e3       	ldi	r18, 0x3F	; 63
 6e2:	8d e0       	ldi	r24, 0x0D	; 13
 6e4:	93 e0       	ldi	r25, 0x03	; 3
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	80 40       	sbci	r24, 0x00	; 0
 6ea:	90 40       	sbci	r25, 0x00	; 0
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x210>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <main+0x21a>
 6f0:	00 00       	nop
		_delay_ms(500);
		serial_tx_string("Attention...smoke detected at Lat: ");
 6f2:	88 e6       	ldi	r24, 0x68	; 104
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	7a dd       	rcall	.-1292   	; 0x1ec <serial_tx_string>
 6f8:	b1 cf       	rjmp	.-158    	; 0x65c <main+0x186>

000006fa <__divsf3>:
 6fa:	0c d0       	rcall	.+24     	; 0x714 <__divsf3x>
 6fc:	eb c0       	rjmp	.+470    	; 0x8d4 <__fp_round>
 6fe:	e3 d0       	rcall	.+454    	; 0x8c6 <__fp_pscB>
 700:	40 f0       	brcs	.+16     	; 0x712 <__divsf3+0x18>
 702:	da d0       	rcall	.+436    	; 0x8b8 <__fp_pscA>
 704:	30 f0       	brcs	.+12     	; 0x712 <__divsf3+0x18>
 706:	21 f4       	brne	.+8      	; 0x710 <__divsf3+0x16>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	19 f0       	breq	.+6      	; 0x712 <__divsf3+0x18>
 70c:	cc c0       	rjmp	.+408    	; 0x8a6 <__fp_inf>
 70e:	51 11       	cpse	r21, r1
 710:	15 c1       	rjmp	.+554    	; 0x93c <__fp_szero>
 712:	cf c0       	rjmp	.+414    	; 0x8b2 <__fp_nan>

00000714 <__divsf3x>:
 714:	f0 d0       	rcall	.+480    	; 0x8f6 <__fp_split3>
 716:	98 f3       	brcs	.-26     	; 0x6fe <__divsf3+0x4>

00000718 <__divsf3_pse>:
 718:	99 23       	and	r25, r25
 71a:	c9 f3       	breq	.-14     	; 0x70e <__divsf3+0x14>
 71c:	55 23       	and	r21, r21
 71e:	b1 f3       	breq	.-20     	; 0x70c <__divsf3+0x12>
 720:	95 1b       	sub	r25, r21
 722:	55 0b       	sbc	r21, r21
 724:	bb 27       	eor	r27, r27
 726:	aa 27       	eor	r26, r26
 728:	62 17       	cp	r22, r18
 72a:	73 07       	cpc	r23, r19
 72c:	84 07       	cpc	r24, r20
 72e:	38 f0       	brcs	.+14     	; 0x73e <__divsf3_pse+0x26>
 730:	9f 5f       	subi	r25, 0xFF	; 255
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	22 0f       	add	r18, r18
 736:	33 1f       	adc	r19, r19
 738:	44 1f       	adc	r20, r20
 73a:	aa 1f       	adc	r26, r26
 73c:	a9 f3       	breq	.-22     	; 0x728 <__divsf3_pse+0x10>
 73e:	33 d0       	rcall	.+102    	; 0x7a6 <__divsf3_pse+0x8e>
 740:	0e 2e       	mov	r0, r30
 742:	3a f0       	brmi	.+14     	; 0x752 <__divsf3_pse+0x3a>
 744:	e0 e8       	ldi	r30, 0x80	; 128
 746:	30 d0       	rcall	.+96     	; 0x7a8 <__divsf3_pse+0x90>
 748:	91 50       	subi	r25, 0x01	; 1
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	e6 95       	lsr	r30
 74e:	00 1c       	adc	r0, r0
 750:	ca f7       	brpl	.-14     	; 0x744 <__divsf3_pse+0x2c>
 752:	29 d0       	rcall	.+82     	; 0x7a6 <__divsf3_pse+0x8e>
 754:	fe 2f       	mov	r31, r30
 756:	27 d0       	rcall	.+78     	; 0x7a6 <__divsf3_pse+0x8e>
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	bb 1f       	adc	r27, r27
 760:	26 17       	cp	r18, r22
 762:	37 07       	cpc	r19, r23
 764:	48 07       	cpc	r20, r24
 766:	ab 07       	cpc	r26, r27
 768:	b0 e8       	ldi	r27, 0x80	; 128
 76a:	09 f0       	breq	.+2      	; 0x76e <__divsf3_pse+0x56>
 76c:	bb 0b       	sbc	r27, r27
 76e:	80 2d       	mov	r24, r0
 770:	bf 01       	movw	r22, r30
 772:	ff 27       	eor	r31, r31
 774:	93 58       	subi	r25, 0x83	; 131
 776:	5f 4f       	sbci	r21, 0xFF	; 255
 778:	2a f0       	brmi	.+10     	; 0x784 <__divsf3_pse+0x6c>
 77a:	9e 3f       	cpi	r25, 0xFE	; 254
 77c:	51 05       	cpc	r21, r1
 77e:	68 f0       	brcs	.+26     	; 0x79a <__divsf3_pse+0x82>
 780:	92 c0       	rjmp	.+292    	; 0x8a6 <__fp_inf>
 782:	dc c0       	rjmp	.+440    	; 0x93c <__fp_szero>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	ec f3       	brlt	.-6      	; 0x782 <__divsf3_pse+0x6a>
 788:	98 3e       	cpi	r25, 0xE8	; 232
 78a:	dc f3       	brlt	.-10     	; 0x782 <__divsf3_pse+0x6a>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f7 95       	ror	r31
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c9 f7       	brne	.-14     	; 0x78c <__divsf3_pse+0x74>
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret
 7a6:	e1 e0       	ldi	r30, 0x01	; 1
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	bb 1f       	adc	r27, r27
 7b0:	62 17       	cp	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	ba 07       	cpc	r27, r26
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__divsf3_pse+0xaa>
 7ba:	62 1b       	sub	r22, r18
 7bc:	73 0b       	sbc	r23, r19
 7be:	84 0b       	sbc	r24, r20
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	ee 1f       	adc	r30, r30
 7c4:	88 f7       	brcc	.-30     	; 0x7a8 <__divsf3_pse+0x90>
 7c6:	e0 95       	com	r30
 7c8:	08 95       	ret

000007ca <__fixsfsi>:
 7ca:	04 d0       	rcall	.+8      	; 0x7d4 <__fixunssfsi>
 7cc:	68 94       	set
 7ce:	b1 11       	cpse	r27, r1
 7d0:	b5 c0       	rjmp	.+362    	; 0x93c <__fp_szero>
 7d2:	08 95       	ret

000007d4 <__fixunssfsi>:
 7d4:	98 d0       	rcall	.+304    	; 0x906 <__fp_splitA>
 7d6:	88 f0       	brcs	.+34     	; 0x7fa <__fixunssfsi+0x26>
 7d8:	9f 57       	subi	r25, 0x7F	; 127
 7da:	90 f0       	brcs	.+36     	; 0x800 <__fixunssfsi+0x2c>
 7dc:	b9 2f       	mov	r27, r25
 7de:	99 27       	eor	r25, r25
 7e0:	b7 51       	subi	r27, 0x17	; 23
 7e2:	a0 f0       	brcs	.+40     	; 0x80c <__fixunssfsi+0x38>
 7e4:	d1 f0       	breq	.+52     	; 0x81a <__fixunssfsi+0x46>
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	1a f0       	brmi	.+6      	; 0x7f6 <__fixunssfsi+0x22>
 7f0:	ba 95       	dec	r27
 7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__fixunssfsi+0x12>
 7f4:	12 c0       	rjmp	.+36     	; 0x81a <__fixunssfsi+0x46>
 7f6:	b1 30       	cpi	r27, 0x01	; 1
 7f8:	81 f0       	breq	.+32     	; 0x81a <__fixunssfsi+0x46>
 7fa:	9f d0       	rcall	.+318    	; 0x93a <__fp_zero>
 7fc:	b1 e0       	ldi	r27, 0x01	; 1
 7fe:	08 95       	ret
 800:	9c c0       	rjmp	.+312    	; 0x93a <__fp_zero>
 802:	67 2f       	mov	r22, r23
 804:	78 2f       	mov	r23, r24
 806:	88 27       	eor	r24, r24
 808:	b8 5f       	subi	r27, 0xF8	; 248
 80a:	39 f0       	breq	.+14     	; 0x81a <__fixunssfsi+0x46>
 80c:	b9 3f       	cpi	r27, 0xF9	; 249
 80e:	cc f3       	brlt	.-14     	; 0x802 <__fixunssfsi+0x2e>
 810:	86 95       	lsr	r24
 812:	77 95       	ror	r23
 814:	67 95       	ror	r22
 816:	b3 95       	inc	r27
 818:	d9 f7       	brne	.-10     	; 0x810 <__fixunssfsi+0x3c>
 81a:	3e f4       	brtc	.+14     	; 0x82a <__fixunssfsi+0x56>
 81c:	90 95       	com	r25
 81e:	80 95       	com	r24
 820:	70 95       	com	r23
 822:	61 95       	neg	r22
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__floatunsisf>:
 82c:	e8 94       	clt
 82e:	09 c0       	rjmp	.+18     	; 0x842 <__floatsisf+0x12>

00000830 <__floatsisf>:
 830:	97 fb       	bst	r25, 7
 832:	3e f4       	brtc	.+14     	; 0x842 <__floatsisf+0x12>
 834:	90 95       	com	r25
 836:	80 95       	com	r24
 838:	70 95       	com	r23
 83a:	61 95       	neg	r22
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	99 23       	and	r25, r25
 844:	a9 f0       	breq	.+42     	; 0x870 <__floatsisf+0x40>
 846:	f9 2f       	mov	r31, r25
 848:	96 e9       	ldi	r25, 0x96	; 150
 84a:	bb 27       	eor	r27, r27
 84c:	93 95       	inc	r25
 84e:	f6 95       	lsr	r31
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f1 11       	cpse	r31, r1
 85a:	f8 cf       	rjmp	.-16     	; 0x84c <__floatsisf+0x1c>
 85c:	fa f4       	brpl	.+62     	; 0x89c <__floatsisf+0x6c>
 85e:	bb 0f       	add	r27, r27
 860:	11 f4       	brne	.+4      	; 0x866 <__floatsisf+0x36>
 862:	60 ff       	sbrs	r22, 0
 864:	1b c0       	rjmp	.+54     	; 0x89c <__floatsisf+0x6c>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	16 c0       	rjmp	.+44     	; 0x89c <__floatsisf+0x6c>
 870:	88 23       	and	r24, r24
 872:	11 f0       	breq	.+4      	; 0x878 <__floatsisf+0x48>
 874:	96 e9       	ldi	r25, 0x96	; 150
 876:	11 c0       	rjmp	.+34     	; 0x89a <__floatsisf+0x6a>
 878:	77 23       	and	r23, r23
 87a:	21 f0       	breq	.+8      	; 0x884 <__floatsisf+0x54>
 87c:	9e e8       	ldi	r25, 0x8E	; 142
 87e:	87 2f       	mov	r24, r23
 880:	76 2f       	mov	r23, r22
 882:	05 c0       	rjmp	.+10     	; 0x88e <__floatsisf+0x5e>
 884:	66 23       	and	r22, r22
 886:	71 f0       	breq	.+28     	; 0x8a4 <__floatsisf+0x74>
 888:	96 e8       	ldi	r25, 0x86	; 134
 88a:	86 2f       	mov	r24, r22
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	2a f0       	brmi	.+10     	; 0x89c <__floatsisf+0x6c>
 892:	9a 95       	dec	r25
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	88 1f       	adc	r24, r24
 89a:	da f7       	brpl	.-10     	; 0x892 <__floatsisf+0x62>
 89c:	88 0f       	add	r24, r24
 89e:	96 95       	lsr	r25
 8a0:	87 95       	ror	r24
 8a2:	97 f9       	bld	r25, 7
 8a4:	08 95       	ret

000008a6 <__fp_inf>:
 8a6:	97 f9       	bld	r25, 7
 8a8:	9f 67       	ori	r25, 0x7F	; 127
 8aa:	80 e8       	ldi	r24, 0x80	; 128
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	08 95       	ret

000008b2 <__fp_nan>:
 8b2:	9f ef       	ldi	r25, 0xFF	; 255
 8b4:	80 ec       	ldi	r24, 0xC0	; 192
 8b6:	08 95       	ret

000008b8 <__fp_pscA>:
 8b8:	00 24       	eor	r0, r0
 8ba:	0a 94       	dec	r0
 8bc:	16 16       	cp	r1, r22
 8be:	17 06       	cpc	r1, r23
 8c0:	18 06       	cpc	r1, r24
 8c2:	09 06       	cpc	r0, r25
 8c4:	08 95       	ret

000008c6 <__fp_pscB>:
 8c6:	00 24       	eor	r0, r0
 8c8:	0a 94       	dec	r0
 8ca:	12 16       	cp	r1, r18
 8cc:	13 06       	cpc	r1, r19
 8ce:	14 06       	cpc	r1, r20
 8d0:	05 06       	cpc	r0, r21
 8d2:	08 95       	ret

000008d4 <__fp_round>:
 8d4:	09 2e       	mov	r0, r25
 8d6:	03 94       	inc	r0
 8d8:	00 0c       	add	r0, r0
 8da:	11 f4       	brne	.+4      	; 0x8e0 <__fp_round+0xc>
 8dc:	88 23       	and	r24, r24
 8de:	52 f0       	brmi	.+20     	; 0x8f4 <__fp_round+0x20>
 8e0:	bb 0f       	add	r27, r27
 8e2:	40 f4       	brcc	.+16     	; 0x8f4 <__fp_round+0x20>
 8e4:	bf 2b       	or	r27, r31
 8e6:	11 f4       	brne	.+4      	; 0x8ec <__fp_round+0x18>
 8e8:	60 ff       	sbrs	r22, 0
 8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__fp_round+0x20>
 8ec:	6f 5f       	subi	r22, 0xFF	; 255
 8ee:	7f 4f       	sbci	r23, 0xFF	; 255
 8f0:	8f 4f       	sbci	r24, 0xFF	; 255
 8f2:	9f 4f       	sbci	r25, 0xFF	; 255
 8f4:	08 95       	ret

000008f6 <__fp_split3>:
 8f6:	57 fd       	sbrc	r21, 7
 8f8:	90 58       	subi	r25, 0x80	; 128
 8fa:	44 0f       	add	r20, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	59 f0       	breq	.+22     	; 0x916 <__fp_splitA+0x10>
 900:	5f 3f       	cpi	r21, 0xFF	; 255
 902:	71 f0       	breq	.+28     	; 0x920 <__fp_splitA+0x1a>
 904:	47 95       	ror	r20

00000906 <__fp_splitA>:
 906:	88 0f       	add	r24, r24
 908:	97 fb       	bst	r25, 7
 90a:	99 1f       	adc	r25, r25
 90c:	61 f0       	breq	.+24     	; 0x926 <__fp_splitA+0x20>
 90e:	9f 3f       	cpi	r25, 0xFF	; 255
 910:	79 f0       	breq	.+30     	; 0x930 <__fp_splitA+0x2a>
 912:	87 95       	ror	r24
 914:	08 95       	ret
 916:	12 16       	cp	r1, r18
 918:	13 06       	cpc	r1, r19
 91a:	14 06       	cpc	r1, r20
 91c:	55 1f       	adc	r21, r21
 91e:	f2 cf       	rjmp	.-28     	; 0x904 <__fp_split3+0xe>
 920:	46 95       	lsr	r20
 922:	f1 df       	rcall	.-30     	; 0x906 <__fp_splitA>
 924:	08 c0       	rjmp	.+16     	; 0x936 <__fp_splitA+0x30>
 926:	16 16       	cp	r1, r22
 928:	17 06       	cpc	r1, r23
 92a:	18 06       	cpc	r1, r24
 92c:	99 1f       	adc	r25, r25
 92e:	f1 cf       	rjmp	.-30     	; 0x912 <__fp_splitA+0xc>
 930:	86 95       	lsr	r24
 932:	71 05       	cpc	r23, r1
 934:	61 05       	cpc	r22, r1
 936:	08 94       	sec
 938:	08 95       	ret

0000093a <__fp_zero>:
 93a:	e8 94       	clt

0000093c <__fp_szero>:
 93c:	bb 27       	eor	r27, r27
 93e:	66 27       	eor	r22, r22
 940:	77 27       	eor	r23, r23
 942:	cb 01       	movw	r24, r22
 944:	97 f9       	bld	r25, 7
 946:	08 95       	ret

00000948 <_exit>:
 948:	f8 94       	cli

0000094a <__stop_program>:
 94a:	ff cf       	rjmp	.-2      	; 0x94a <__stop_program>
